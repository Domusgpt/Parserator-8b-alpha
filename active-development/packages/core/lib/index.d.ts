import { HeuristicArchitect } from './architect';
import { RegexExtractor } from './extractor';
import { createDefaultResolvers, ResolverRegistry } from './resolvers';
import { ParseratorSession } from './session';
import { createPlanCacheTelemetryEmitter, createTelemetryHub, TelemetryHub } from './telemetry';
import { createInMemoryPlanCache } from './cache';
import { ArchitectAgent, BatchParseOptions, ExtractorAgent, ParseratorPreprocessor, ParseratorPostprocessor, ParseratorPlanCacheEntry, ParseratorLeanLLMPlanRewriteState, ParseRequest, ParseResponse, ParseratorCoreConfig, ParseratorCoreOptions, ParseratorLeanLLMPlanRewriteOptions, ParseratorProfileOption, ParseratorSessionFromResponseOptions, ParseratorSessionInit, ParseratorInterceptor } from './types';
export * from './types';
export * from './profiles';
export { ParseratorSession } from './session';
export { createDefaultPreprocessors } from './preprocessors';
export { createDefaultPostprocessors } from './postprocessors';
export { createHybridArchitect } from './hybrid-architect';
export declare class ParseratorCore {
    private readonly apiKey;
    private config;
    private logger;
    private baseArchitect;
    private architect;
    private extractor;
    private resolverRegistry;
    private profileName?;
    private profileOverrides;
    private configOverrides;
    private telemetry;
    private emitPlanCacheTelemetry;
    private emitPlanRewriteTelemetry;
    private planCache?;
    private readonly interceptors;
    private readonly preprocessors;
    private readonly postprocessors;
    private leanLLMPlanRewriteOptions?;
    constructor(options: ParseratorCoreOptions);
    updateConfig(partial: Partial<ParseratorCoreConfig>): void;
    getConfig(): ParseratorCoreConfig;
    getLeanLLMPlanRewriteState(): ParseratorLeanLLMPlanRewriteState;
    getProfile(): string | undefined;
    applyProfile(profile: ParseratorProfileOption): void;
    static profiles(): import("./types").ParseratorProfile[];
    setArchitect(agent: ArchitectAgent): void;
    setExtractor(agent: ExtractorAgent): void;
    enableLeanLLMPlanRewrite(options: ParseratorLeanLLMPlanRewriteOptions): void;
    registerResolver(resolver: Parameters<ResolverRegistry['register']>[0], position?: 'append' | 'prepend'): void;
    replaceResolvers(resolvers: Parameters<ResolverRegistry['register']>[0][]): void;
    listResolvers(): string[];
    use(interceptor: ParseratorInterceptor): () => void;
    listInterceptors(): ParseratorInterceptor[];
    usePreprocessor(preprocessor: ParseratorPreprocessor): () => void;
    listPreprocessors(): ParseratorPreprocessor[];
    clearPreprocessors(): void;
    usePostprocessor(postprocessor: ParseratorPostprocessor): () => void;
    listPostprocessors(): ParseratorPostprocessor[];
    clearPostprocessors(): void;
    createSession(init: ParseratorSessionInit): ParseratorSession;
    createSessionFromResponse(options: ParseratorSessionFromResponseOptions): ParseratorSession;
    getPlanCacheEntry(request: ParseRequest): Promise<ParseratorPlanCacheEntry | undefined>;
    deletePlanCacheEntry(request: ParseRequest): Promise<boolean>;
    clearPlanCache(profile?: string): Promise<boolean>;
    private composeConfig;
    parse(request: ParseRequest): Promise<ParseResponse>;
    parseMany(requests: ParseRequest[], options?: BatchParseOptions): Promise<ParseResponse[]>;
    disableLeanLLMPlanRewrite(): void;
    private wrapArchitect;
    private applyArchitect;
    private getInterceptors;
    private getPreprocessors;
    private getPostprocessors;
    private getPlanCacheKey;
    private cloneCacheEntry;
    private runBeforeInterceptors;
    private runPreprocessors;
    private runPostprocessors;
    private runAfterInterceptors;
    private runFailureInterceptors;
    private handleArchitectFailure;
    private handleExtractorFailure;
    private attachRegistryIfSupported;
}
export { HeuristicArchitect, RegexExtractor, ResolverRegistry, createDefaultResolvers, createInMemoryPlanCache, createTelemetryHub, createPlanCacheTelemetryEmitter, TelemetryHub };
//# sourceMappingURL=index.d.ts.map