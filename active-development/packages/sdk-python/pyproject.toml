[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "parserator-sdk"
version = "1.0.0"
description = "Official Python SDK for Parserator - Intelligent data parsing using the Architect-Extractor pattern"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "PROPRIETARY"}
authors = [
    {name = "Paul Phillips", email = "phillips.paul.email@gmail.com"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: General",
]
keywords = [
    "parsing", "data", "llm", "ai", "architect-extractor", 
    "gemini", "structured-data", "json", "extraction", "automation",
    "data-science", "pandas", "numpy", "machine-learning"
]
dependencies = []

[project.urls]
Homepage = "https://parserator.com"
Documentation = "https://parserator.com/docs/sdk/python"
Repository = "https://github.com/domusgpt/parserator"
"Bug Reports" = "https://github.com/domusgpt/parserator/issues"
"Source Code" = "https://github.com/domusgpt/parserator/tree/main/packages/sdk-python"

[project.scripts]
parserator = "parserator.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/parserator"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    'slow: marks tests as slow (deselect with "-m not slow")',
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/parserator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == '__main__':",
    'class .*\\bProtocol\\):',
    '@(abc\\.)?abstractmethod',
]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B011", "F401", "F811"]
